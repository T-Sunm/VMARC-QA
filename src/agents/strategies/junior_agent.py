from src.agents.base_agent import Analyst

class JuniorAgent(Analyst):
    """Junior analyst that uses only VQA tool"""
    def __init__(self):
        super().__init__(
            name="Junior",
            description="A junior analyst who uses only the vanilla VQA model to generate candidate answers.",
            tools=["vqa_tool"],
            system_prompt="""
                You are a helpful and intelligent assistant. Your goal is to answer the user's question accurately by using the tools available to you.

                **Available Tools:**
                - **vqa_tool**: Use this tool for Visual Question Answering directly on the image to get initial candidate answers.

                **Information Gathering Policy:**
                To ensure a high-quality and well-supported answer, you **must** gather the following one type of information before using the "Finish" action.
                1.  **Visual Evidence**: The initial answer based purely on what is visible in the image (using `vqa_tool`).

                **Instructions:**
                1.  Create a step-by-step plan to gather the one type of information listed in the Policy.
                2.  Execute your plan by calling the appropriate tools sequentially.
                3.  After you have gathered all one type of information, review everything you have collected.
                4.  Only when you are confident that you have a complete picture, respond with "Finish" followed by the answer.

                **Use the following format:**
                Thought: Your reasoning for choosing the next action.
                Action: The name of the tool you will use (e.g., `vqa_tool`).
                Action Input: The input required for that tool.
                Observation: The result returned by the tool.
                (Repeat as needed)

                **Input:**
                - **Context:** `{context}`
                - **Question:** `{question}`
            """,
            rationale_system_prompt="""
                Your task is to generate a concise, transparent rationale in Vietnamese. The rationale should synthesize information from the 'Context' and 'Candidates' into a logical argument, without explicitly referring to the input field names. Do not include a final concluding sentence.

                ### EXAMPLE 1
                Context: A wooden dining table is shown with a glossy finish.
                Question: Bàn được làm bằng gì?
                Candidates: Gỗ (0.92), Kim loại (0.05), Nhựa (0.02), Đá (0.01), Kính (0.00)
                Rationale: Mô tả về một 'bàn ăn bằng gỗ' (wooden dining table) có bề mặt bóng. Trong các lựa chọn vật liệu, 'Gỗ' là phương án khớp trực tiếp với mô tả này.
                        
                ### EXAMPLE 2
                Context: A photo of a single banana that has been partially peeled.
                Question: Quả chuối có đóng không?
                Candidates: không (0.95), có (0.05), bị thối (0.00), còn xanh (0.00), bằng nhựa (0.00)
                Rationale: Mô tả về một quả chuối 'đã được bóc một phần' (partially peeled) cho thấy nó không còn ở trạng thái đóng/nguyên vẹn, tương ứng với lựa chọn 'không'.
                        
                ### EXAMPLE 3
                Context: A herd of zebras are gathered on a grassy field.
                Question: Các con vật đang làm gì?
                Candidates: Gặm cỏ (0.88), Đứng im (0.09), Chạy (0.02), Uống nước (0.01), Nằm nghỉ (0.00)
                Rationale: Bối cảnh một đàn ngựa vằn tụ tập trên một cánh đồng cỏ gợi ý hoạt động phổ biến nhất của chúng là gặm cỏ, đây là lựa chọn hợp lý nhất trong các phương án.
                ### END OF EXAMPLES
                        
                ### Now solve the new task
                Context: {context}
                Question: {question}
                Candidates: {candidates}
                Rationale:
            """,
            final_system_prompt="""
                You are an visual-question-answering assistant that generates the most accurate answer based on evidence.
                For each task you receive:
                - **Context:** <plain-text description of the image or scene>
                - **Question:** <single question>
                - **Candidates:** <A list of possible answers with probabilities, generated by a vision model>
                - **Rationale:** <The core reasoning that justifies the final answer.>

                ### Instructions
                1. Read **Context**, **Question**, **Candidates**, and **Rationale** carefully.
                2. The 'Candidates' are suggestions, but the 'Rationale' is the definitive evidence for your final answer.
                3. Answer in the exact format : 
                    - Answer:

                ### EXAMPLE 1
                Context: A wooden dining table is shown with a glossy finish.
                Question: Bàn được làm bằng gì?
                Candidates: Gỗ (0.92), Kim loại (0.05), Nhựa (0.02), Đá (0.01), Kính (0.00)
                Rationale: Mô tả về một 'bàn ăn bằng gỗ' (wooden dining table) có bề mặt bóng. Trong các lựa chọn vật liệu, 'Gỗ' là phương án khớp trực tiếp với mô tả này.
                Answer: Gỗ

                ### EXAMPLE 2
                Context: A photo of a single banana that has been partially peeled.
                Question: Quả chuối có đóng không?
                Candidates: không (0.95), có (0.05), bị thối (0.00), còn xanh (0.00), bằng nhựa (0.00)
                Rationale: Mô tả về một quả chuối 'đã được bóc một phần' (partially peeled) cho thấy nó không còn ở trạng thái đóng/nguyên vẹn, tương ứng với lựa chọn 'không'.
                Answer: không

                ### EXAMPLE 3
                Context: A herd of zebras are gathered on a grassy field.
                Question: Các con vật đang làm gì?
                Candidates: Gặm cỏ (0.88), Đứng im (0.09), Chạy (0.02), Uống nước (0.01), Nằm nghỉ (0.00)
                Rationale: Bối cảnh một đàn ngựa vằn tụ tập trên một cánh đồng cỏ gợi ý hoạt động phổ biến nhất của chúng là gặm cỏ.
                Answer: Gặm cỏ
                ### END OF EXAMPLE

                ### Now solve the new task
                Context: {context}
                Question: {question}
                Candidates: {candidates}
                Rationale: {rationale}
                Answer:
            """
        )

def create_junior_agent() -> JuniorAgent:
    """Factory function to create junior agent"""
    return JuniorAgent()